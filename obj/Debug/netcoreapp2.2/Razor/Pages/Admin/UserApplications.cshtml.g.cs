#pragma checksum "G:\freelaunceProject\E-MedicalClaimRefundSystem\EMedicalClaimRefundSystem\Pages\Admin\UserApplications.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "7729189f768c20f621463552b27c011d7a292ab6"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(EMedicalClaimRefundSystem.Pages.Admin.Pages_Admin_UserApplications), @"mvc.1.0.razor-page", @"/Pages/Admin/UserApplications.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAttribute(@"/Pages/Admin/UserApplications.cshtml", typeof(EMedicalClaimRefundSystem.Pages.Admin.Pages_Admin_UserApplications), null)]
namespace EMedicalClaimRefundSystem.Pages.Admin
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "G:\freelaunceProject\E-MedicalClaimRefundSystem\EMedicalClaimRefundSystem\Pages\_ViewImports.cshtml"
using EMedicalClaimRefundSystem;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"7729189f768c20f621463552b27c011d7a292ab6", @"/Pages/Admin/UserApplications.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"9e6c7be0fa33978710ec5ee38ed5852939d81676", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Admin_UserApplications : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 3 "G:\freelaunceProject\E-MedicalClaimRefundSystem\EMedicalClaimRefundSystem\Pages\Admin\UserApplications.cshtml"
  
    ViewData["Title"] = "UserApplications";
    Layout = "~/Pages/Shared/_AdminLayout.cshtml";

#line default
#line hidden
            BeginContext(179, 58, true);
            WriteLiteral("\r\n<h1>UserApplications</h1>\r\n<div class=\"container\">\r\n    ");
            EndContext();
            BeginContext(238, 23, false);
#line 10 "G:\freelaunceProject\E-MedicalClaimRefundSystem\EMedicalClaimRefundSystem\Pages\Admin\UserApplications.cshtml"
Write(Html.AntiForgeryToken());

#line default
#line hidden
            EndContext();
            BeginContext(261, 8311, true);
            WriteLiteral(@"
    <br />
    <div class=""text-right"">        
        <input class=""col-sm-2 btn btn-danger "" type=""button"" value=""Delete"" onclick=""DeleteUsers()"" />
        <input class=""col-sm-2 btn btn-info"" type=""button"" value=""Disable"" onclick=""BlockUsers()"" />
    </div>
    <br />
    <div style=""width:90%; margin:0 auto;"">
        <table id=""usersTable"" class=""table table-striped table-bordered dt-responsive nowrap"" cellspacing=""0"">
            <thead class=""thead-dark"">
                <tr>
                    <th><input name=""select_all"" value=""1"" type=""checkbox""></th>
                    <th>ID</th>
                    <th>Patient</th>
                    <th>Phone</th>
                    <th>Notes</th>
                    <th>Status</th>
                    <th>Applied By</th>
                    <th>Applied Date</th>
                    <th>Actions</th>
                </tr>
            </thead>
        </table>
    </div>
</div>

<script>

    var rows_selected = [];
    let tab");
            WriteLiteral(@"le;
    //
    // Updates ""Select all"" control in a data table
    //
    function updateDataTableSelectAllCtrl(table) {
        var $table = table.table().node();
        var $chkbox_all = $('tbody input[type=""checkbox""]', $table);
        var $chkbox_checked = $('tbody input[type=""checkbox""]:checked', $table);
        var chkbox_select_all = $('thead input[name=""select_all""]', $table).get(0);

        // If none of the checkboxes are checked
        if ($chkbox_checked.length === 0) {
            chkbox_select_all.checked = false;
            if ('indeterminate' in chkbox_select_all) {
                chkbox_select_all.indeterminate = false;
            }

            // If all of the checkboxes are checked
        } else if ($chkbox_checked.length === $chkbox_all.length) {
            chkbox_select_all.checked = true;
            if ('indeterminate' in chkbox_select_all) {
                chkbox_select_all.indeterminate = false;
            }

            // If some of the checkboxe");
            WriteLiteral(@"s are checked
        } else {
            chkbox_select_all.checked = true;
            if ('indeterminate' in chkbox_select_all) {
                chkbox_select_all.indeterminate = true;
            }
        }
    }
    $(document).ready(function () {       
        table = $('#usersTable').DataTable({           
            ""processing"": true,
            ""serverSide"": false,
            ""ajax"": {
                ""url"": ""/Admin/UserApplications?handler=Applications"",
                ""type"": ""GET"",
                ""beforeSend"" : function (xhr) {
                    xhr.setRequestHeader(""X-XSRF-Token"",
                        $('input:hidden[name=""__RequestVerificationToken""]').val());
                },                
                ""dataSrc"": '',                               
            },
            //data : response,
            searching: true,
            ""pageLength"": 50,
            columns: [                            
                {
                    data:   ""I");
            WriteLiteral(@"d"",
                    render: function ( data, type, row ) {
                                    
                            return '<input id='+data+' type=""checkbox"">';                                    
                    }                    
                },
                {
                    ""render"": function (data, type, full, meta) {
                        return meta.row;
                    }
                },
                {
                    ""data"" : ""PatientName"" ,                   
                },
                {
                    ""data"" : ""PhoneNumber"",                    
                },
                {
                    ""data"": ""Notes"",
                    ""render"": function (data, type, full, meta) {
                        var length = 15;
                        var trimstr = data.length > length ? data.substring(0, length - 3) + "" ..."" : data;
                        return trimstr;
                    }
                },
         ");
            WriteLiteral(@"       {
                    ""data"": ""Status"",
                    ""render"": function (data, type, full, meta) {
                        switch (data) {
                            case ""0"": return ""User Claimed"";
                            case ""1"": return ""CRD Accepted"";
                            case ""2"": return ""CRD Rejected"";
                            case ""3"": return ""Bank Rejected"";
                            case ""4"": return ""Refunded Sucessfully"";                            
                            case ""5"": return ""User Cenceled"";
                            default: return ""-.-"";
                        }
                    }
                },
                {
                    ""data"": ""AppliedByUserName"",
                    ""render"": function (data, type, full, meta) {
                        return JSON.stringify(data);
                    }
                },    
                { ""data"": ""AppliedDate"" },
                {
                    data:   ""Id"",
");
            WriteLiteral(@"                    render: function (data, type, row) {
                        return '<button align=""center"" type=""button"" class=""btn btn-default btn-circle btn-lg"" onclick=OpenDetails('+data+')><i class=""fa fa-ellipsis-v""></i></button>';
                    }
                }
            ],                                   
        });

        

        // Handle click on checkbox
        $('#usersTable tbody').on('click', 'input[type=""checkbox""]', function (e) {
            var $row = $(this).closest('tr');

            // Get row data
            var data = table.row($row).data();

            // Get row ID
            var rowId = data.Id;

            // Determine whether row ID is in the list of selected row IDs
            var index = $.inArray(rowId, rows_selected);

            // If checkbox is checked and row ID is not in list of selected row IDs
            if (this.checked && index === -1) {
                rows_selected.push(rowId);

                // Otherwise, i");
            WriteLiteral(@"f checkbox is not checked and row ID is in list of selected row IDs
            } else if (!this.checked && index !== -1) {
                rows_selected.splice(index, 1);
            }

            if (this.checked) {
                $row.addClass('selected');
            } else {
                $row.removeClass('selected');
            }

            // Update state of ""Select all"" control
            updateDataTableSelectAllCtrl(table);

            // Prevent click event from propagating to parent
            e.stopPropagation();
        });


        // Handle click on ""Select all"" control
        $('thead input[name=""select_all""]', table.table().container()).on('click', function (e) {
            if (this.checked) {
                $('#usersTable tbody input[type=""checkbox""]:not(:checked)').trigger('click');
            } else {
                $('#usersTable tbody input[type=""checkbox""]:checked').trigger('click');
            }

            // Prevent click event from propag");
            WriteLiteral(@"ating to parent
            e.stopPropagation();
        });

    });    
    function DeleteUsers() {
        
        var jsonselectedrows = JSON.stringify(rows_selected);
        alert(""CheckBox ids are "" + jsonselectedrows);
        $.ajax({
            type: ""POST"",
            beforeSend: function (xhr) {
                xhr.setRequestHeader(""X-XSRF-Token"",
                    $('input:hidden[name=""__RequestVerificationToken""]').val());
            },
            url: ""/Admin/UserApplications?handler=DelApp"",
            contentType: ""application/json; charset=utf-8"",
            dataType: ""json"",
            data: jsonselectedrows,
            success: function (response) {
                table.ajax.reload();
            }
        });
            }
    function OpenDetails(appid) {            
            //Pass this values to new page
            var url = ""/Admin/UserAppDetails?appid=""+appid;
            window.open(url,'_blank', 'height=500,width=800,status=yes,toolbar=no");
            WriteLiteral(",menubar=no,location=no,scrollbars=yes,resizable=no,titlebar=no\');\r\n            return false;\r\n        }\r\n</script>\r\n\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<EMedicalClaimRefundSystem.Pages.Admin.UserApplicationsModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<EMedicalClaimRefundSystem.Pages.Admin.UserApplicationsModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<EMedicalClaimRefundSystem.Pages.Admin.UserApplicationsModel>)PageContext?.ViewData;
        public EMedicalClaimRefundSystem.Pages.Admin.UserApplicationsModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
